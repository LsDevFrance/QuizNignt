// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRoles {
  USER
  ADMIN
}

enum UserPlan {
  FREE
  PREMIUM
  ULTIMATE
}

model User {
  id            String    @id @default(cuid())
  name          String?
  lastname      String?
  email         String   @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  quizzes       Quiz[]

  plan          UserPlan  @default(FREE)

  role         UserRoles @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  questions   Question[]
  creator     User     @relation(fields: [creatorId], references: [id])
}

model Question {
  id          String   @id @default(cuid())
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  quizId      String
  answers     Answer[]
}

model Answer {
  id          String   @id @default(cuid())
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String
  correct     Boolean
}

model VerificationToken {
  id String   @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 @@unique([email, token])
}
